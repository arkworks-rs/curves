use ark_ec::models::{ModelParameters, SWModelParameters};
use ark_ec::hashing::curve_maps::wb::WBParams;
use ark_ff::{field_new, Zero};

use crate::{
    fields::{FQ_ONE, FQ_ZERO},
    Fq, Fr,
};

use super::g1_swu_iso::Parameters as SWUIsogenousCurveParameters;

#[derive(Clone, Default, PartialEq, Eq)]
pub struct Parameters;

impl ModelParameters for Parameters {
    type BaseField = Fq;
    type ScalarField = Fr;
}

impl SWModelParameters for Parameters {
    /// COEFF_A = 0
    const COEFF_A: Fq = FQ_ZERO;

    /// COEFF_B = 1
    #[rustfmt::skip]
    const COEFF_B: Fq = FQ_ONE;

    /// COFACTOR = (x - 1)^2 / 3  = 30631250834960419227450344600217059328
    const COFACTOR: &'static [u64] = &[0x0, 0x170b5d4430000000];

    /// COFACTOR_INV = COFACTOR^{-1} mod r
    /// = 5285428838741532253824584287042945485047145357130994810877
    #[rustfmt::skip]
    const COFACTOR_INV: Fr = field_new!(Fr, "5285428838741532253824584287042945485047145357130994810877");

    /// AFFINE_GENERATOR_COEFFS = (G1_GENERATOR_X, G1_GENERATOR_Y)
    const AFFINE_GENERATOR_COEFFS: (Self::BaseField, Self::BaseField) =
        (G1_GENERATOR_X, G1_GENERATOR_Y);

    #[inline(always)]
    fn mul_by_a(_: &Self::BaseField) -> Self::BaseField {
        Self::BaseField::zero()
    }
}

/// G1_GENERATOR_X =
/// 81937999373150964239938255573465948239988671502647976594219695644855304257327692006745978603320413799295628339695
#[rustfmt::skip]
pub const G1_GENERATOR_X: Fq = field_new!(Fq, "81937999373150964239938255573465948239988671502647976594219695644855304257327692006745978603320413799295628339695");

/// G1_GENERATOR_Y =
/// 241266749859715473739788878240585681733927191168601896383759122102112907357779751001206799952863815012735208165030
#[rustfmt::skip]
pub const G1_GENERATOR_Y: Fq = field_new!(Fq, "241266749859715473739788878240585681733927191168601896383759122102112907357779751001206799952863815012735208165030");

impl WBParams for Parameters
{
    type IsogenousCurve = SWUIsogenousCurveParameters;

    const PHI_X_NOM: &'static [<Self::IsogenousCurve as ModelParameters>::BaseField] = &[field_new!(Fq, "193998319509726820507989550271170150152295134566185995404913197000040351261255617081226666104680020093330241093633"), field_new!(Fq, "40474824132456359704279181570318738632422647360355249739068643631356267969150730939906729705473"), field_new!(Fq, "193998319509726820447277314072485610595876362210707887456279225959507476652652651634192264150953923683470146535424")];
                                                                                               

    const PHI_X_DEN: &'static [<Self::IsogenousCurve as ModelParameters>::BaseField] = &[FQ_ZERO, FQ_ONE, field_new!(Fq, "161899296529825438817116726281274954529690589441420998956274574525425071876602923759626918821892")];

    const PHI_Y_NOM: &'static [<Self::IsogenousCurve as ModelParameters>::BaseField] = &[FQ_ZERO, field_new!(Fq, "226331372761347957259321141983031841844344323660550327972398729833380409804798219928097777122126690108885281275905"), field_new!(Fq, "129332213006484547066038603046131306324615528732935438218576102373893108782773376834518846023512776472080255287298"), field_new!(Fq, "32333053251621136903112182208573040583096119983059602439070460434672245065050016464457115901761911040205276577794"), field_new!(Fq, "193998319509726820507989550271170150152295134566185995404913197000040351261255617081226666104680020093330241093631")];
    
    const PHI_Y_DEN: &'static [<Self::IsogenousCurve as ModelParameters>::BaseField] = &[FQ_ZERO, FQ_ONE, field_new!(Fq, "485697889589476316451350178843824863589071768324262996868823723576275215629808771278880756465676"), field_new!(Fq, "971395779178952632902700357687649727178143536648525993737647447152550431259617542557761512931340"), field_new!(Fq, "258664426012969094010652733694893533536393512754914660539884262666720468348340822774968888139573360124440321458169")];

}
