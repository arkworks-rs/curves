use ark_ec::models::{ModelParameters, SWModelParameters};
use ark_ec::hashing::curve_maps::swu::{SWUParams};
use ark_ff::{field_new};

use crate::{fields::FQ_ZERO, Fq, Fq2, Fr};

#[derive(Clone, Default, PartialEq, Eq)]
pub struct Parameters;

impl ModelParameters for Parameters {
    type BaseField = Fq2;
    type ScalarField = Fr;
}

// sage: E2p = iso_G2.domain()
// sage: r = 8444461749428370424248824938781546531375899335154063827935233455917409239041
// sage: E2p.order()/r
// 7923214915284317143930293550643874566881017850177945424769256759165301436616933228209277966774092486467289478618404761412630691835764674559376407658497
// sage: E2p
//Elliptic Curve defined by y^2 = x^3 + (69357795553467368835766998649443114298653120475771922004522583893765862042427351483161253261358624703462995261783*X2+203567575243095400658685394654545117908398249146024925306257919445062693445414588103741379252427065422417496933054)*x + (806998283981877041862626354975415285020485827233942100233224759047656510577433749137260740227904569833498998565*X2+249039961697346248294162904170316935273494032138504221215795383014884687447192317932476994472315647695087734549420) over Finite Field in X2 of size 258664426012969094010652733694893533536393512754914660539884262666720468348340822774968888139573360124440321458177^2
impl SWModelParameters for Parameters {
    /// COEFF_A = 
    #[rustfmt::skip]
    const COEFF_A: Fq2 = field_new!(Fq2,                                    
                                    field_new!(Fq,"203567575243095400658685394654545117908398249146024925306257919445062693445414588103741379252427065422417496933054"),
                                    field_new!(Fq, "69357795553467368835766998649443114298653120475771922004522583893765862042427351483161253261358624703462995261783"),
    );

    /// COEFF_B = 
    #[rustfmt::skip]
    const COEFF_B: Fq2 = field_new!(Fq2,
        field_new!(Fq, "249039961697346248294162904170316935273494032138504221215795383014884687447192317932476994472315647695087734549420"),
        field_new!(Fq, "806998283981877041862626354975415285020485827233942100233224759047656510577433749137260740227904569833498998565"),
    );

    /// COFACTOR =
    /// 7923214915284317143930293550643874566881017850177945424769256759165301436616933228209277966774092486467289478618404761412630691835764674559376407658497
    /// same as the original g2 curve
    /// sage: iso_G2.domain().order() == iso_G2.codomain().order()
    /// True
    #[rustfmt::skip]
    const COFACTOR: &'static [u64] = &[
        0x0000000000000001,
        0x452217cc90000000,
        0xa0f3622fba094800,
        0xd693e8c36676bd09,
        0x8c505634fae2e189,
        0xfbb36b00e1dcc40c,
        0xddd88d99a6f6a829,
        0x26ba558ae9562a,
    ];

    /// COFACTOR_INV = COFACTOR^{-1} mod r
    /// = 6764900296503390671038341982857278410319949526107311149686707033187604810669
    #[rustfmt::skip]
    const COFACTOR_INV: Fr = field_new!(Fr, "6764900296503390671038341982857278410319949526107311149686707033187604810669");

    /// AFFINE_GENERATOR_COEFFS = (G2_GENERATOR_X, G2_GENERATOR_Y)
    const AFFINE_GENERATOR_COEFFS: (Self::BaseField, Self::BaseField) =
        (G2_GENERATOR_X, G2_GENERATOR_Y);

}

#[rustfmt::skip]
pub const G2_GENERATOR_X: Fq2 = field_new!(Fq2, G2_GENERATOR_X_C0, G2_GENERATOR_X_C1);
#[rustfmt::skip]
pub
    const G2_GENERATOR_Y: Fq2 = field_new!(Fq2, G2_GENERATOR_Y_C0, G2_GENERATOR_Y_C1);

//sage: G2_gen
//(152209914092745808277594956866181055187624831129109767937025242463317365117655129123148193049673425418513926319001*X2 + 44471777796618567688228760095584248343372454885978087674329841655595593880133139294404651664057692271364857231527 : 191377956145194479040228903677940355038998863371661730030204479850936075480341608934735952709786495341106477933498*X2 + 115206687171448860889110309021279060303629519187879257051215751573842462972180856243991157572371972099444077110343 : 1)
//sage: G2_gen * 8444461749428370424248824938781546531375899335154063827935233455917409239041
//(0 : 1 : 0)
/// G2_GENERATOR_X_C0 =
#[rustfmt::skip]
pub const G2_GENERATOR_X_C0: Fq = field_new!(Fq, "44471777796618567688228760095584248343372454885978087674329841655595593880133139294404651664057692271364857231527");

/// G2_GENERATOR_X_C1 =
#[rustfmt::skip]
pub const G2_GENERATOR_X_C1: Fq = field_new!(Fq, "152209914092745808277594956866181055187624831129109767937025242463317365117655129123148193049673425418513926319001");

/// G2_GENERATOR_Y_C0 =
#[rustfmt::skip]
pub const G2_GENERATOR_Y_C0: Fq = field_new!(Fq, "115206687171448860889110309021279060303629519187879257051215751573842462972180856243991157572371972099444077110343");

/// G2_GENERATOR_Y_C1 =
#[rustfmt::skip]
pub const G2_GENERATOR_Y_C1: Fq = field_new!(Fq, "191377956145194479040228903677940355038998863371661730030204479850936075480341608934735952709786495341106477933498");


impl SWUParams for Parameters {
    //sage: find_non_square_low_abs_in_F2(F2)
    //X2 is a nonsquare 
    const XI : Fq2 = field_new!(Fq2, FQ_ZERO, field_new!(Fq, "1")); //a nonsquare in Fq^2 (everything in Fq is a square in Fq^2

    //sage: F2.primitive_element()
    //X2 + 12
    const ZETA: Fq2 = field_new!(Fq2, field_new!(Fq, "12"), field_new!(Fq, "1")); //arbitatry primitive root of unity (element)

    //sage: (X2/(X2+12)).sqrt()
    // 25287845596807718523110318959367609903997561038526391951644235049109860280400383531488996993530470961919264596714*X2 + 200138305193006670106568350065117164393454034535073143939796425065925916468251080047578372554642759159440885035919
const XI_ON_ZETA_SQRT: Fq2 = field_new!(Fq2,
               field_new!(Fq, "200138305193006670106568350065117164393454034535073143939796425065925916468251080047578372554642759159440885035919"),
               field_new!(Fq, "25287845596807718523110318959367609903997561038526391951644235049109860280400383531488996993530470961919264596714"),); ////square root of THETA=Xi/Zeta

}
